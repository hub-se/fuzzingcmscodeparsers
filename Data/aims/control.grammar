file = (settings)? phys scf (eigen)? (output)? (phonon)? (relax)? boundary species minbasis basisfunc;
settings = ("restart wf\n")? (" override_illconditioning ." bool ".\n")? (" use_pimd_wrapper " host num "\n")? (" compute_forces ." bool ".\n")? (" override_relativity ." bool ".\n")? (" compute_analytical_stress ." bool ".\n")? (" output_level " ("full"|"MD_light") "\n")? (" basis_threshold " numf "\n")? (" preconditioner kerker " numf "\n");
phys = "xc " ("pw-lda"|"pbe"|"hse06 " numf "\n hse_unit " ("b"|"bohr^(-1)")|"pbesol") "\n" (" spin none\n")? ("relativistic " ("atomic_zora"|"zora") " scalar " (numf)? "\n")? (" include_spin_orbit\n")? (" charge " numf "\n")? (" vdw_correction_hirshfeld")?;
scf = ("occupation_type " ("gaussian"|"fermi") numf "\n")? (" mixer pulay\n n_max_pulay " num "\n")? (" charge_mix_param " numf "\n sc_accuracy_rho " numf "\n sc_accuracy_eev " numf "\n sc_accuracy_etot " numf "\n")? (" sc_accuracy_forces " numf "\n") (" sc_iter_limit " num "\n")?;
eigen = "KS_method scalapack\n empty_states " num "\n";
output = (outputdosentry|outputbandentry|outputprojentry|outputpoleentry|outputfeldentry)*;
outputpoleentry = "output quadrupole";
outputfeldentry = "output hirshfeld";
outputprojentry = "output atom_proj_dos " num num num numf "\n";
outputdosentry = "output dos "num num num numf "\n";
outputbandentry = "output band " numf numf numf numf numf numf num ("G"|"X"|"K"|"L"|"W"|"U"|"Gamma"|"\\Gamma") ("G"|"X"|"K"|"L"|"W"|"U"|"Gamma"|"\\Gamma") "\n";
phonon = (phonondisp|phononsymm|phononsuper|phononfreq|phononfree|phonondos|phononband)*;
phonondisp = "phonon displacement " numf "\n";
phononsymm = "phonon symmetry_thresh " numf "\n";
phononsuper = "phonon supercell " num num num "\n";
phononfreq = "phonon frequency_units cm^-1\n";
phononfree = "phonon free_energy " num num num num "\n";
phonondos = "phonon dos " num num num num num "\n";
phononband = "phonon band " numf numf numf numf numf numf num ("G"|"X"|"K"|"L"|"W"|"U"|"Gamma"|"\\Gamma") ("G"|"X"|"K"|"L"|"W"|"U"|"Gamma"|"\\Gamma") "\n";
relax = "DFPT dielectric\n dfpt_pulay_steps " num "\n DFPT_mixing " numf "\n DFPT_sc_accuracy_dm " numf "\n";
boundary = "k_grid " num num num "\n" (" dos_kgrid_factors " num num num "\n")? (" DFPT_width " numf "\n")?;
species = "species " str "\n nucleus " num "\n mass " numf "\n l_hartree " num "\n cut_pot " numf numf numf "\n basis_dep_cutoff " numf "\n radial_base " num numf "\n radial_multiplier " num "\n angular_grids specified\n" division* (" outer_grid " num "\n")*;
division = "division " numf num "\n";
minbasis = "valence " num " s " numf "\n valence " num " p " numf "\n ion_occ " num " s " numf "\n ion_occ " num " p " numf "\n";
basisfunc = (hydro|ionic)*; // apparently this was in no file -> ("for_aux hydro " num " g " num "\n")? hydro*;
hydro = "hydro " num ("p"|"d"|"g"|"s"|"f") numf "\n";
ionic = "ionic " num ("p"|"d"|"g"|"s"|"f") " auto\n";

